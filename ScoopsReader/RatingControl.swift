//
//  RatingControl.swift
//  ScoopsReader
//
//  Created by MacBook Pro on 28/2/16.
//  Copyright 춸 2016 weblogmerlos.com. All rights reserved.
//

import UIKit

/// Clase de tipo UIView para la valoraci칩n ==> 'rating' de noticas
class RatingControl: UIView {
    
    var totalRating : News?
    var save : NewsAuthorTableViewController?
    //var save : NewsAuthorTableViewController?
    
    // MARK: Properties
    
    // Observo a los  cambios  de 'rating', que ser치 llamado despu칠s
    // de que la propiedad cambie, es decir, cuando se haya cambiado
    // el valor de ==>'rating'. A continuaci칩n  incluyo la llamada a 
    // 'setNeedsLayout()', que actualiza el dise침o cada vez que haya
    // un cambio en el valor de 'rating', asegurando que la interfaz
    // siempre  estar치 mostrando un valor exacto en el valor 'rating'
    var rating = 0 {
        didSet {
            setNeedsLayout()
        }
    }
    
    var ratingButtons = [UIButton]()
    var spacing = 5
    var stars = 5
    // Resultado 1/2votaciones
    var result = 0
    // Cantidad de votos users
    var amountVotes = 0
    // Total rating  acumulado
    var ratingTotalNews = 0
    
    
    // MARK: Initialization
    
    // Inicalizador para definir 'StoryBoards'. Se puede inicializar
    // mediante  'frame', si  trabajamos con 'frames', en  este caso
    // voy a trabajar con 'StoryBoards' por lo tanto, uso 'aDecorder'
    // Cada subclase de 'UIview' que implementa un incializador debe:
    required init?(coder aDecoder: NSCoder) {
        
        // LLamo  al incializador de la supreclase  == > 'super.init'
        super.init(coder: aDecoder)
        
        // Im치genes estrellas  para la configuraci칩n  de los botones
        let filledStarImage = UIImage(named: "filledStar")
        let emptyStarImage = UIImage(named: "emptyStar")
        
        // Bucle para crear-a침adir los cinco botones  para el rating
        for _ in 0..<stars {
            
            // A침ado un bot칩n a la UIView que contendr치 la imagen 'rating'
            let button = UIButton()
            
            // Inicalizado el bot칩n le asigno, seg칰n el estado, la imagen
            button.setImage(emptyStarImage, forState: .Normal)
            button.setImage(filledStarImage, forState: .Selected)
            // Estado en el que el bot칩n est치 seleccionado y resaltado,es
            // decir, cuando el usuario est치 en proceso de tocar el bot칩n
            button.setImage(filledStarImage, forState: [.Highlighted, .Selected])
            
            // Para asegurarme de que la imagen no muestre alguna caract.
            // adicional  durante  el cambio  de  estado, al ser pulsada.
            button.adjustsImageWhenHighlighted = false
            
            // A침ado la acci칩n 'TouchDown'cada vez que el bot칩n se pulse
            // Mediante este target no es necesario definir un 'IBAction'
            // La acci칩n que desencadenar치 el bot칩n: 'ratingButtonTapped'
            button.addTarget(self, action: "ratingButtonTapped:",
                forControlEvents: .TouchDown)
            
            // A침ado los botones  en cada ciclo del bucle a 'ratinButtons'
            ratingButtons += [button]
            
            // A침ado el bot칩n a la subvista para mostar la imagen 'rating'
            addSubview(button)
            // NOTA: este bot칩n se crear치 en base a lo definido dentro del
            // m칠todo que llama el sistema para dise침ar sus subvistas, que
            // es el que he sobreescrito  m치s abajo ===> 'layoutSubviews()'
        }
    }
    
    // MARK: Initialization
    
    // M칠todo que se llama en  el momento adecuado por el sistema para
    // que la 'UIView' puedad realizar dise침o preciso de sus subvistas
    override func layoutSubviews() {
        
        // Obteniendo el alto, para establecer botones de tipo 'square'
        let buttonSize = Int (frame.size.height)
        
        // Creo el bot칩n desde el origen y con alto y ancho 'buttonSize'
        var buttonFrame = CGRect(x: 0, y: 0, width: buttonSize, height: buttonSize)
        
        // Obtengo la  posici칩n de  cada bot칩n a partir de su longitud
        // Recorro el  array 'ratingButtons'  enumerados por su 칤ndice
        // enumerate() devuelve una colecci칩n que contiene los element
        // ==> colecci칩n  de tuplas agrupadas por valores, que en 칠ste
        // caso cada tupla contiene un 칤ndice y un bot칩n de la colecci
        // Para cada tupla de la colecci칩n, el bucle une a los valores
        // del 칤ndice y el bot칩n a variables locales:'index' y 'button'
        // Utiliza el 칤ndice para calcular la nueva ubicaci칩n de buton
        // La ubicaci칩n inicial se fija  al tama침o  del bot칩n est치ndar
        // de 44 puntos y 5puntos de de padding multiplicado por index
        for(index, button) in ratingButtons.enumerate(){
            // Cojo el primero con 칤ndice '0', por tanto se situa 'x=0'
            // que  tendr치 un ancho y un alto definido por 'buttonSize'
            // El siguiente,  con 칤ndice '1',  se situar치 en ==> 'x=49'
            // y as칤 hasta el quinto bot칩n que ser치 el de la posic칩n 4
            buttonFrame.origin.x = CGFloat(index * (buttonSize + spacing))
            // Asigno donde  situar cada bot칩n en el valor 'posici칩n X'
            button.frame = buttonFrame
        }
        
        // Actualizo el estado de los botones(stars) rellenas o vacias
        // Hay que actualizarlas tambi칠n  cuando  la vista sea cargada
        // y no solamente cuando se actualiza si hay cambios de rating
        updateButtonSelectionStates()
    }
    
    // Es necesario decirle a la vista  el tama침o  del bot칩n, para eso
    // sobreescribo el m칠todo 'intrinsicContentSize' para que coincida
    // con el tama침o especificado anterirmente en la Interface Builder
    override func intrinsicContentSize() -> CGSize {
        
        // Obtengo altura del bot칩n para acutalizar 'intrinsic content'
        // para  que la 'UIView' pueda  dise침ar correctamente el bot칩n
        let buttonSize = Int (frame.size.height)
        // Le indico a la ==> 'UIView' que  su ancho total va a ser el:
        // 'ancho un bot칩n + el padding del bot칩n * el n췈 de estrellas'
        let width = (buttonSize + spacing) * stars
        // Devuelvo el tama침o que tendra el contenedor de la =>'UIview'
        return CGSize(width: width, height: buttonSize)
    }
    
    // MARK: Button Action
    func ratingButtonTapped(button: UIButton) {
        // Busco el bot칩n que me pasan como par치metro, que es el bot칩n
        // seleccionado en el array que los contiene ==>'ratingButtons'
        // devolviendo el 칤ndice en el que se encuentra el bot칩n selec
        // Desempaqueto seguro: s칠  que en el array est치n los 'buttons'
        // Para obtener la  calificaci칩n correspondiente a침ado un '+ 1'
        // ya que los  arrays comienzan en su primera posici칩n en cero.
        // Es decir, si  se pulsa la segunda  estrella, seg칰n el array,
        // tendr치 la posci칩n 1 y  rat칤ng tendr칤a una calificaci칩n de 1
        // cosa que no es cierta, ya que es dos, de ah칤 que le sume +1
        rating = ratingButtons.indexOf(button)! + 1
        
        // TODO: implementar votaci칩n media de una noticia por usuarios
        
        let total = self.totalVoteOfTheNewsByUsers(rating)
        totalRating?.totalRating  = total
        
        // Actulaizo el estado de los botones, stars rellenas o vacias
        updateButtonSelectionStates()
        
        print("Button pressed 游땙游녨")
        print("Cantidad de usuarios que han votado:  \(amountVotes)")
        print("Valoraci칩n total usuarios: \(ratingTotalNews)")
        print("Valoraci칩n media usuarios: \(total)")
        
        
    }
    
    // MARK: Utils

    /// M칠todo de ayuda que  acutalizar estado de los botones 'selected'
    func updateButtonSelectionStates() {
        
        // Itero  a trav칠s de 'ratingButtons' para establecer el estado
        // de cada bot칩n  en funci칩n de  que su index sea < que  rating.
        for(index, button) in ratingButtons.enumerate() {
            
            // Si el 칤ndice del bot칩n seleccionado es < que el 'rating'?
            // Si es as칤, se evalua la expresi칩n con true, estableciendo
            // el estado  del bot칩n  a seleccionado, haciendo visible la
            // imagen de la estrella rellena. De lo contrario, el  bot칩n
            // no estar치 seleccionado mostrando la imagen estrella vacia
            // Decir que si se  selecciona  un bot칩n del array,  siempre
            // ser치  menor que el rating, por lo que  simpre se cumplir치
            // Por tanto, cuando no se seleccione 칠ste se mostrar치 vacia
            button.selected = index < rating
        }
    }
    
    /*
    // Only override drawRect: if you perform custom drawing.
    // An empty implementation adversely affects performance during animation.
    override func drawRect(rect: CGRect) {
    // Drawing code
    }
    */
    
    // MARK: Utils
    /// Calcula el rating medio de los usuarios que han votado una noticia
    func totalVoteOfTheNewsByUsers(valueRating :Int)-> Int{

        switch(valueRating){
            
        case 1: self.ratingTotalNews += 1
            self.amountVotes++
            break
        case 2: self.ratingTotalNews += 2
        self.amountVotes++
            break
        case 3: self.ratingTotalNews += 3
        self.amountVotes++
            break
        case 4: self.ratingTotalNews += 4
        self.amountVotes++
            break
        case 5: self.ratingTotalNews += 5
        self.amountVotes++
            break
        default: ()
        }
        
        result = (self.ratingTotalNews / self.amountVotes) 
        self.totalRating?.totalRating = self.result
        self.totalRating?.amountVotes = self.amountVotes
        //self.totalRating?.ratingTotalNews = self.ratingTotalNews
        
        // A침ado al modelo los valores de las votaciones
        self.totalRating?.amountVotes = self.amountVotes
        //self.totalRating?.ratingTotalNews = self.ratingTotalNews
        self.totalRating?.result = self.result
        
        self.save?.saveNews()
        
        return result
    }
    
}













